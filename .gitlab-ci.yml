# GitLab CI jobs for SDP Workflow library

variables:
  GIT_STRATEGY: clone

workflow:
  rules:
    - if: $CI_COMMIT_BRANCH
    - if: $CI_COMMIT_TAG

stages:
  - test
  - build
  - publish

image: python:3.9

# ============================================================================
# Test and lint Python package
# ============================================================================

test:
  stage: test
  before_script:
    - pip3 install -r requirements.txt -r requirements-test.txt
  script:
    - python3 setup.py test
  after_script:
    - mkdir -p build/reports
    - mv code-coverage.xml unit-tests.xml build/reports
  artifacts:
    paths:
      - build
    expire_in: 1 week
    when: always

lint:
  stage: test
  before_script:
    - pip3 install -r requirements.txt -r requirements-test.txt
  script:
    - pylint --exit-zero --output-format=parseable src/ska_sdp_workflow
    - pylint --exit-zero --output-format=pylint2junit.JunitReporter src/ska_sdp_workflow > linting.xml
    - black --check . # fails if any of the code doesn't comply to black formatting
  after_script:
    - mkdir -p build/reports
    - mv linting.xml build/reports
  artifacts:
    paths:
      - build
    expire_in: 1 week
    when: always

docs:
  stage: test
  before_script:
    - pip3 install -r docs/requirements.txt
  script:
    - cd docs
    - make html
  artifacts:
    paths:
      - docs/build/html
    expire_in: 1 week
    when: always

# ============================================================================
# Build Python package
# ============================================================================

.build:
  stage: build
  image: $SKA_K8S_TOOLS_DEPLOY_IMAGE
  tags:
    - k8srunner
  after_script:
    - /usr/local/bin/extract-metadata.sh MANIFEST.skao.int
    - for filename in dist/*.whl dist/*.tar.gz; do
    -   /usr/local/bin/patch-metadata.sh $filename MANIFEST.skao.int
    - done
  artifacts:
    paths:
      - dist/
    expire_in: 1 week

# Executed on a non-tag commit

build-dev:
  extends: .build
  script:
    - python3 setup.py egg_info -b+dev.$CI_COMMIT_SHORT_SHA sdist bdist_wheel
  rules:
    - if: '$CI_COMMIT_TAG == null || $CI_COMMIT_TAG == ""'

# Executed on a tag commit on the default branch

build-release:
  extends: .build
  script:
    - python3 setup.py sdist bdist_wheel
  only:
    variables:
      - $CI_COMMIT_MESSAGE =~ /^.+$/ # Confirm tag message exists
      - $CI_COMMIT_TAG =~ /^((([0-9]+)\.([0-9]+)\.([0-9]+)(?:-([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?)(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?)$/ #Confirm semantic versioning of tag
  except:
    - branches

# ============================================================================
# Publish Python package
# ============================================================================

.publish:
  stage: publish
  image: $SKA_K8S_TOOLS_DEPLOY_IMAGE
  tags:
    - k8srunner

# Publish to GitLab on non-tag commit

publish-dev:
  extends: .publish
  script:
    - TWINE_USERNAME=gitlab-ci-token TWINE_PASSWORD=${CI_JOB_TOKEN} twine upload --repository-url ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/pypi --skip-existing dist/*
  rules:
    - if: '$CI_COMMIT_TAG == null || $CI_COMMIT_TAG == ""'

# Publish to CAR on tag commit on default branch

publish-release:
  extends: .publish
  script:
    - TWINE_USERNAME=${CAR_PYPI_USERNAME} TWINE_PASSWORD=${CAR_PYPI_PASSWORD} twine upload --repository-url $CAR_PYPI_REPOSITORY_URL dist/*
  only:
    variables:
      - $CI_COMMIT_MESSAGE =~ /^.+$/ # Confirm tag message exists
      - $CI_COMMIT_TAG =~ /^((([0-9]+)\.([0-9]+)\.([0-9]+)(?:-([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?)(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?)$/ #Confirm semantic versioning of tag
  except:
    - branches

# ============================================================================
# CI metrics
# ============================================================================

# Create Gitlab CI badges from CI metrics
# https://developer.skatelescope.org/en/latest/tools/continuousintegration.html#automated-collection-of-ci-health-metrics-as-part-of-the-ci-pipeline
include:
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/post_step.yml'
